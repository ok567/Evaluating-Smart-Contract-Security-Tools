pragma solidity ^0.8.0;

// ReentrancyWithTransfer is a smart contract that allows users to deposit and withdraw funds.
// This contract uses the `transfer` function, which mitigates reentrancy attacks by limiting
// the gas available to the recipient's fallback function.
contract ReentrancyWithTransfer {
    // Mapping to store the balance of each address that interacts with the contract.
    mapping(address => uint) public balances;

    // Function that allows users to deposit Ether into the contract.
    // The deposited amount is added to the sender's balance.
    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }

    // Function that allows users to withdraw a specified amount of Ether from their balance.
    function withdraw(uint _amount) public {
        // Ensure the user has enough balance to withdraw the requested amount.
        require(balances[msg.sender] >= _amount, "Insufficient balance");
        
        // Transfer the requested amount of Ether to the caller.
        // The `transfer` function sends Ether with a gas stipend of 2300, which prevents
        // the recipient from making further calls that could exploit a reentrancy vulnerability.
        payable(msg.sender).transfer(_amount);
        
        // Subtract the withdrawn amount from the user's balance.
        balances[msg.sender] -= _amount;
    }

    // A helper function that returns the balance of the contract.
    // This is useful for checking how much Ether is stored in the contract.
    function getBalance() public view returns (uint) {
        return address(this).balance;
    }
}
