pragma solidity ^0.8.0;

// A simple bank contract that allows deposits, withdrawals, and account closure.
contract Bank {
    // Address of the owner of the contract
    address public owner;
    // Mapping to track the balance of each account
    mapping(address => uint) public balances;

    // Constructor function sets the owner of the contract to the deployer
    constructor() {
        owner = msg.sender;
    }

    // Function to deposit Ether into the sender's account
    function deposit() public payable {
        // Increment the sender's balance by the deposited amount
        balances[msg.sender] += msg.value;
    }

    // Function to withdraw a specified amount of Ether from the sender's account
    function withdraw(uint amount) public {
        // Check if the sender has enough balance to withdraw
        require(balances[msg.sender] >= amount, "Insufficient balance.");
        // Decrement the sender's balance by the withdrawal amount
        balances[msg.sender] -= amount;
        // Transfer the specified amount to the sender
        payable(msg.sender).transfer(amount);
    }

    // Function to close an account and transfer all its balance to the account owner
    function closeAccount(address account) public {
        // Get the balance of the specified account
        uint balance = balances[account];
        // Reset the balance of the specified account to zero
        balances[account] = 0;
        // Transfer the entire balance to the account owner
        payable(account).transfer(balance);
    }
}
